import { B2Vec2, B2Transform } from '../../Common/b2Math';
import { B2AABB, B2RayCastInput, B2RayCastOutput } from '../b2Collision';
import { B2DistanceProxy } from '../b2Distance';
import { B2MassData } from './b2Shape';
import { B2Shape } from './b2Shape';
export declare class B2PolygonShape extends B2Shape {
    m_centroid: B2Vec2;
    m_vertices: B2Vec2[];
    m_normals: B2Vec2[];
    m_count: number;
    constructor();
    Clone(): B2PolygonShape;
    Copy(other: B2PolygonShape): B2PolygonShape;
    GetChildCount(): number;
    private static Set_s_ps;
    private static Set_s_hull;
    private static Set_s_r;
    private static Set_s_v;
    Set(vertices: B2Vec2[], count?: number, start?: number): B2PolygonShape;
    SetAsArray(vertices: B2Vec2[], count?: number): B2PolygonShape;
    SetAsBox(hx: number, hy: number, center?: B2Vec2, angle?: number): B2PolygonShape;
    private static TestPoint_s_pLocal;
    TestPoint(xf: B2Transform, p: B2Vec2): boolean;
    private static ComputeDistance_s_pLocal;
    private static ComputeDistance_s_normalForMaxDistance;
    private static ComputeDistance_s_minDistance;
    private static ComputeDistance_s_distance;
    ComputeDistance(xf: B2Transform, p: B2Vec2, normal: B2Vec2, childIndex: number): number;
    private static RayCast_s_p1;
    private static RayCast_s_p2;
    private static RayCast_s_d;
    RayCast(output: B2RayCastOutput, input: B2RayCastInput, xf: B2Transform, childIndex: number): boolean;
    private static ComputeAABB_s_v;
    ComputeAABB(aabb: B2AABB, xf: B2Transform, childIndex: number): void;
    private static ComputeMass_s_center;
    private static ComputeMass_s_s;
    private static ComputeMass_s_e1;
    private static ComputeMass_s_e2;
    ComputeMass(massData: B2MassData, density: number): void;
    private static Validate_s_e;
    private static Validate_s_v;
    Validate(): boolean;
    SetupDistanceProxy(proxy: B2DistanceProxy, index: number): void;
    private static ComputeSubmergedArea_s_normalL;
    private static ComputeSubmergedArea_s_depths;
    private static ComputeSubmergedArea_s_md;
    private static ComputeSubmergedArea_s_intoVec;
    private static ComputeSubmergedArea_s_outoVec;
    private static ComputeSubmergedArea_s_center;
    ComputeSubmergedArea(normal: B2Vec2, offset: number, xf: B2Transform, c: B2Vec2): number;
    Dump(log: (format: string, ...args: any[]) => void): void;
    private static ComputeCentroid_s_pRef;
    private static ComputeCentroid_s_e1;
    private static ComputeCentroid_s_e2;
    static ComputeCentroid(vs: B2Vec2[], count: number, out: B2Vec2): B2Vec2;
}
