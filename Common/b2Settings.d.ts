export declare function B2Assert(condition: boolean, ...args: any[]): void;
export declare const B2_maxFloat: number;
export declare const B2_epsilon: number;
export declare const B2_epsilon_sq: number;
export declare const B2_pi: number;
export declare const B2_maxManifoldPoints: number;
export declare const B2_maxPolygonVertices: number;
export declare const B2_aabbExtension: number;
export declare const B2_aabbMultiplier: number;
export declare const B2_linearSlop: number;
export declare const B2_angularSlop: number;
export declare const B2_polygonRadius: number;
export declare const B2_maxSubSteps: number;
export declare const B2_maxTOIContacts: number;
export declare const B2_velocityThreshold: number;
export declare const B2_maxLinearCorrection: number;
export declare const B2_maxAngularCorrection: number;
export declare const B2_maxTranslation: number;
export declare const B2_maxTranslationSquared: number;
export declare const B2_maxRotation: number;
export declare const B2_maxRotationSquared: number;
export declare const B2_baumgarte: number;
export declare const B2_toiBaumgarte: number;
export declare const B2_invalidParticleIndex: number;
export declare const B2_maxParticleIndex: number;
export declare const B2_particleStride: number;
export declare const B2_minParticleWeight: number;
export declare const B2_maxParticlePressure: number;
export declare const B2_maxParticleForce: number;
export declare const B2_maxTriadDistance: number;
export declare const B2_maxTriadDistanceSquared: number;
export declare const B2_minParticleSystemBufferCapacity: number;
export declare const B2_barrierCollisionTime: number;
export declare const B2_timeToSleep: number;
export declare const B2_linearSleepTolerance: number;
export declare const B2_angularSleepTolerance: number;
export declare function B2Alloc(size: number): any;
export declare function B2Free(mem: any): void;
export declare function B2Log(message: string, ...args: any[]): void;
export declare class B2Version {
    major: number;
    minor: number;
    revision: number;
    constructor(major?: number, minor?: number, revision?: number);
    toString(): string;
}
export declare const B2_version: B2Version;
export declare const B2_changelist: number;
export declare function B2ParseInt(v: string): number;
export declare function B2ParseUInt(v: string): number;
export declare function B2MakeArray(length: number, init: {
    (i: number): any;
}): any[];
export declare function B2MakeNullArray(length: number): any[];
export declare function B2MakeNumberArray(length: number, init?: number): number[];
