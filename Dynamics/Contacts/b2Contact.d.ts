import { B2Transform, B2Sweep } from '../../Common/b2Math';
import { B2Manifold, B2WorldManifold } from '../../Collision/b2Collision';
import { B2Body } from '../b2Body';
import { B2Fixture } from '../b2Fixture';
import { B2ContactListener } from '../b2WorldCallbacks';
export declare function B2MixFriction(friction1: number, friction2: number): number;
export declare function B2MixRestitution(restitution1: number, restitution2: number): number;
export declare class B2ContactEdge {
    other: B2Body | null;
    contact: B2Contact | null;
    prev: B2ContactEdge | null;
    next: B2ContactEdge | null;
}
export declare class B2Contact {
    m_islandFlag: boolean;
    m_touchingFlag: boolean;
    m_enabledFlag: boolean;
    m_filterFlag: boolean;
    m_bulletHitFlag: boolean;
    m_toiFlag: boolean;
    m_prev: B2Contact | null;
    m_next: B2Contact | null;
    m_nodeA: B2ContactEdge;
    m_nodeB: B2ContactEdge;
    m_fixtureA: B2Fixture | null;
    m_fixtureB: B2Fixture | null;
    m_indexA: number;
    m_indexB: number;
    m_manifold: B2Manifold;
    m_toiCount: number;
    m_toi: number;
    m_friction: number;
    m_restitution: number;
    m_tangentSpeed: number;
    m_oldManifold: B2Manifold;
    GetManifold(): B2Manifold;
    GetWorldManifold(worldManifold: B2WorldManifold): void;
    IsTouching(): boolean;
    SetEnabled(flag: boolean): void;
    IsEnabled(): boolean;
    GetNext(): B2Contact | null;
    GetFixtureA(): B2Fixture | null;
    GetChildIndexA(): number;
    GetFixtureB(): B2Fixture | null;
    GetChildIndexB(): number;
    Evaluate(manifold: B2Manifold, xfA: B2Transform, xfB: B2Transform): void;
    FlagForFiltering(): void;
    SetFriction(friction: number): void;
    GetFriction(): number;
    ResetFriction(): void;
    SetRestitution(restitution: number): void;
    GetRestitution(): number;
    ResetRestitution(): void;
    SetTangentSpeed(speed: number): void;
    GetTangentSpeed(): number;
    Reset(fixtureA: B2Fixture, indexA: number, fixtureB: B2Fixture, indexB: number): void;
    Update(listener: B2ContactListener): void;
    private static ComputeTOI_s_input;
    private static ComputeTOI_s_output;
    ComputeTOI(sweepA: B2Sweep, sweepB: B2Sweep): number;
}
