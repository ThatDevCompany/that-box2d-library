import { B2Vec2, B2Rot } from '../../Common/b2Math';
import { B2Joint, B2JointDef, B2LimitState } from './b2Joint';
import { B2SolverData } from '../b2TimeStep';
export declare class B2RopeJointDef extends B2JointDef {
    localAnchorA: B2Vec2;
    localAnchorB: B2Vec2;
    maxLength: number;
    constructor();
}
export declare class B2RopeJoint extends B2Joint {
    m_localAnchorA: B2Vec2;
    m_localAnchorB: B2Vec2;
    m_maxLength: number;
    m_length: number;
    m_impulse: number;
    m_indexA: number;
    m_indexB: number;
    m_u: B2Vec2;
    m_rA: B2Vec2;
    m_rB: B2Vec2;
    m_localCenterA: B2Vec2;
    m_localCenterB: B2Vec2;
    m_invMassA: number;
    m_invMassB: number;
    m_invIA: number;
    m_invIB: number;
    m_mass: number;
    m_state: B2LimitState;
    m_qA: B2Rot;
    m_qB: B2Rot;
    m_lalcA: B2Vec2;
    m_lalcB: B2Vec2;
    constructor(def: B2RopeJointDef);
    private static InitVelocityConstraints_s_P;
    InitVelocityConstraints(data: B2SolverData): void;
    private static SolveVelocityConstraints_s_vpA;
    private static SolveVelocityConstraints_s_vpB;
    private static SolveVelocityConstraints_s_P;
    SolveVelocityConstraints(data: B2SolverData): void;
    private static SolvePositionConstraints_s_P;
    SolvePositionConstraints(data: B2SolverData): boolean;
    GetAnchorA(out: B2Vec2): B2Vec2;
    GetAnchorB(out: B2Vec2): B2Vec2;
    GetReactionForce(inv_dt: number, out: B2Vec2): B2Vec2;
    GetReactionTorque(inv_dt: number): number;
    GetLocalAnchorA(): B2Vec2;
    GetLocalAnchorB(): B2Vec2;
    SetMaxLength(length: number): void;
    GetMaxLength(): number;
    GetLimitState(): B2LimitState;
    Dump(log: (format: string, ...args: any[]) => void): void;
}
