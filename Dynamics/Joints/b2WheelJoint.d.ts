import { B2Vec2, B2Rot } from '../../Common/b2Math';
import { B2Joint, B2JointDef } from './b2Joint';
import { B2SolverData } from '../b2TimeStep';
import { B2Body } from '../b2Body';
export declare class B2WheelJointDef extends B2JointDef {
    localAnchorA: B2Vec2;
    localAnchorB: B2Vec2;
    localAxisA: B2Vec2;
    enableMotor: boolean;
    maxMotorTorque: number;
    motorSpeed: number;
    frequencyHz: number;
    dampingRatio: number;
    constructor();
    Initialize(bA: B2Body, bB: B2Body, anchor: B2Vec2, axis: B2Vec2): void;
}
export declare class B2WheelJoint extends B2Joint {
    m_frequencyHz: number;
    m_dampingRatio: number;
    m_localAnchorA: B2Vec2;
    m_localAnchorB: B2Vec2;
    m_localXAxisA: B2Vec2;
    m_localYAxisA: B2Vec2;
    m_impulse: number;
    m_motorImpulse: number;
    m_springImpulse: number;
    m_maxMotorTorque: number;
    m_motorSpeed: number;
    m_enableMotor: boolean;
    m_indexA: number;
    m_indexB: number;
    m_localCenterA: B2Vec2;
    m_localCenterB: B2Vec2;
    m_invMassA: number;
    m_invMassB: number;
    m_invIA: number;
    m_invIB: number;
    m_ax: B2Vec2;
    m_ay: B2Vec2;
    m_sAx: number;
    m_sBx: number;
    m_sAy: number;
    m_sBy: number;
    m_mass: number;
    m_motorMass: number;
    m_springMass: number;
    m_bias: number;
    m_gamma: number;
    m_qA: B2Rot;
    m_qB: B2Rot;
    m_lalcA: B2Vec2;
    m_lalcB: B2Vec2;
    m_rA: B2Vec2;
    m_rB: B2Vec2;
    constructor(def: B2WheelJointDef);
    GetMotorSpeed(): number;
    GetMaxMotorTorque(): number;
    SetSpringFrequencyHz(hz: number): void;
    GetSpringFrequencyHz(): number;
    SetSpringDampingRatio(ratio: number): void;
    GetSpringDampingRatio(): number;
    private static InitVelocityConstraints_s_d;
    private static InitVelocityConstraints_s_P;
    InitVelocityConstraints(data: B2SolverData): void;
    private static SolveVelocityConstraints_s_P;
    SolveVelocityConstraints(data: B2SolverData): void;
    private static SolvePositionConstraints_s_d;
    private static SolvePositionConstraints_s_P;
    SolvePositionConstraints(data: B2SolverData): boolean;
    GetDefinition(def: B2WheelJointDef): B2WheelJointDef;
    GetAnchorA(out: B2Vec2): B2Vec2;
    GetAnchorB(out: B2Vec2): B2Vec2;
    GetReactionForce(inv_dt: number, out: B2Vec2): B2Vec2;
    GetReactionTorque(inv_dt: number): number;
    GetLocalAnchorA(): B2Vec2;
    GetLocalAnchorB(): B2Vec2;
    GetLocalAxisA(): B2Vec2;
    GetJointTranslation(): number;
    GetJointSpeed(): number;
    GetPrismaticJointTranslation(): number;
    GetPrismaticJointSpeed(): number;
    GetRevoluteJointAngle(): number;
    GetRevoluteJointSpeed(): number;
    IsMotorEnabled(): boolean;
    EnableMotor(flag: boolean): void;
    SetMotorSpeed(speed: number): void;
    SetMaxMotorTorque(force: number): void;
    GetMotorTorque(inv_dt: number): number;
    Dump(log: (format: string, ...args: any[]) => void): void;
}
