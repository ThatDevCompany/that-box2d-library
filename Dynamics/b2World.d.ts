import { B2Vec2, B2Transform } from '../Common/b2Math';
import { B2Color, B2Draw } from '../Common/b2Draw';
import { B2AABB } from '../Collision/b2Collision';
import { B2Shape } from '../Collision/Shapes/b2Shape';
import { B2Contact } from './Contacts/b2Contact';
import { B2Joint, B2JointDef } from './Joints/b2Joint';
import { B2Body, B2BodyDef } from './b2Body';
import { B2ContactManager } from './b2ContactManager';
import { B2Fixture } from './b2Fixture';
import { B2Island } from './b2Island';
import { B2Profile, B2TimeStep } from './b2TimeStep';
import { B2ContactFilter } from './b2WorldCallbacks';
import { B2ContactListener } from './b2WorldCallbacks';
import { B2DestructionListener } from './b2WorldCallbacks';
import { B2QueryCallback, B2QueryCallbackFunction } from './b2WorldCallbacks';
import { B2RayCastCallback, B2RayCastCallbackFunction } from './b2WorldCallbacks';
import { B2ParticleSystemDef, B2ParticleSystem } from '../Particle/b2ParticleSystem';
export declare class B2World {
    m_newFixture: boolean;
    m_locked: boolean;
    m_clearForces: boolean;
    m_contactManager: B2ContactManager;
    m_bodyList: B2Body;
    m_jointList: B2Joint;
    m_particleSystemList: B2ParticleSystem;
    m_bodyCount: number;
    m_jointCount: number;
    m_gravity: B2Vec2;
    m_allowSleep: boolean;
    m_destructionListener: B2DestructionListener;
    m_debugDraw: B2Draw;
    m_inv_dt0: number;
    m_warmStarting: boolean;
    m_continuousPhysics: boolean;
    m_subStepping: boolean;
    m_stepComplete: boolean;
    m_profile: B2Profile;
    m_island: B2Island;
    s_stack: B2Body[];
    constructor(gravity: B2Vec2);
    SetDestructionListener(listener: B2DestructionListener): void;
    SetContactFilter(filter: B2ContactFilter): void;
    SetContactListener(listener: B2ContactListener): void;
    SetDebugDraw(debugDraw: B2Draw): void;
    CreateBody(def: B2BodyDef): B2Body;
    DestroyBody(b: B2Body): void;
    CreateJoint(def: B2JointDef): B2Joint;
    DestroyJoint(j: B2Joint): void;
    CreateParticleSystem(def: B2ParticleSystemDef): B2ParticleSystem;
    DestroyParticleSystem(p: B2ParticleSystem): void;
    CalculateReasonableParticleIterations(timeStep: number): number;
    private static Step_s_step;
    private static Step_s_stepTimer;
    private static Step_s_timer;
    Step(dt: number, velocityIterations: number, positionIterations: number, particleIterations?: number): void;
    ClearForces(): void;
    DrawParticleSystem(system: B2ParticleSystem): void;
    private static DrawDebugData_s_color;
    private static DrawDebugData_s_vs;
    private static DrawDebugData_s_xf;
    DrawDebugData(): void;
    QueryAABB(callback: B2QueryCallback | B2QueryCallbackFunction, aabb: B2AABB): void;
    private static QueryShape_s_aabb;
    QueryShape(callback: B2QueryCallback | B2QueryCallbackFunction, shape: B2Shape, transform: B2Transform): void;
    private static QueryPoint_s_aabb;
    QueryPoint(callback: B2QueryCallback | B2QueryCallbackFunction, point: B2Vec2): void;
    private static RayCast_s_input;
    private static RayCast_s_output;
    private static RayCast_s_point;
    RayCast(callback: B2RayCastCallback | B2RayCastCallbackFunction, point1: B2Vec2, point2: B2Vec2): void;
    RayCastOne(point1: B2Vec2, point2: B2Vec2): B2Fixture;
    RayCastAll(point1: B2Vec2, point2: B2Vec2, out?: B2Fixture[]): B2Fixture[];
    GetBodyList(): B2Body;
    GetJointList(): B2Joint;
    GetParticleSystemList(): B2ParticleSystem;
    GetContactList(): B2Contact;
    SetAllowSleeping(flag: boolean): void;
    GetAllowSleeping(): boolean;
    SetWarmStarting(flag: boolean): void;
    GetWarmStarting(): boolean;
    SetContinuousPhysics(flag: boolean): void;
    GetContinuousPhysics(): boolean;
    SetSubStepping(flag: boolean): void;
    GetSubStepping(): boolean;
    GetProxyCount(): number;
    GetBodyCount(): number;
    GetJointCount(): number;
    GetContactCount(): number;
    GetTreeHeight(): number;
    GetTreeBalance(): number;
    GetTreeQuality(): number;
    SetGravity(gravity: B2Vec2, wake?: boolean): void;
    GetGravity(): B2Vec2;
    IsLocked(): boolean;
    SetAutoClearForces(flag: boolean): void;
    GetAutoClearForces(): boolean;
    ShiftOrigin(newOrigin: B2Vec2): void;
    GetContactManager(): B2ContactManager;
    GetProfile(): B2Profile;
    Dump(log: (format: string, ...args: any[]) => void): void;
    private static DrawJoint_s_p1;
    private static DrawJoint_s_p2;
    private static DrawJoint_s_color;
    DrawJoint(joint: B2Joint): void;
    DrawShape(fixture: B2Fixture, color: B2Color): void;
    Solve(step: B2TimeStep): void;
    private static SolveTOI_s_subStep;
    private static SolveTOI_s_backup;
    private static SolveTOI_s_backup1;
    private static SolveTOI_s_backup2;
    private static SolveTOI_s_toi_input;
    private static SolveTOI_s_toi_output;
    SolveTOI(step: B2TimeStep): void;
}
